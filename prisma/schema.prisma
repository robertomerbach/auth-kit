// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String       @id @default(cuid())
  name                     String?
  email                    String       @unique
  emailVerified            DateTime?
  password                 String?
  image                    String?
  language                 String       @default("en")
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  resetToken               String?      @unique
  resetTokenExpires        DateTime?
  accounts                 Account[]
  sessions                 Session[]
  activities               Activity[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerification {
  id         String   @id @default(cuid())
  email      String   @unique
  code       String   // 6 digit code
  expiresAt  DateTime
  verified   Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model PasswordResetAttempt {
  id        String   @id @default(cuid())
  email     String
  createdAt DateTime @default(now())

  @@index([email, createdAt])
}

model Activity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  ipAddress String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}